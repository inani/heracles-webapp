{"version":3,"sources":["components/pages/logo.svg","components/atoms/Aqms.js","components/molecules/MessdatenList.js","components/organisms/TestDaten.js","components/pages/Homepage.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","getMessdaten","gql","_templateObject","MessdatenList","data","this","props","console","log","loading","react_default","a","createElement","error","allMessdaten","map","fu","UID","id","Datum","DatumZeit","Temperatur","Luftdruck","Luftfeuchtigkeit","VOC","FEINSTAUBPM100","FEINSTAUBPM25","displayDaten","Component","graphql","client","ApolloClient","uri","TestDaten","react_apollo_browser_umd","className","Aqms","molecules_MessdatenList","Homepage","src","logo","alt","href","target","rel","organisms_TestDaten","App","pages_Homepage","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iGAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,8hBCUxC,IAAMC,EAAeC,YAAHC,KAgBZC,yLAEF,IAAIC,EAAOC,KAAKC,MAAMF,KAItB,OAFAG,QAAQC,IAAIJ,GAERA,EAAKK,QAAgBC,EAAAC,EAAAC,cAAA,uBACrBR,EAAKS,MAAcH,EAAAC,EAAAC,cAAA,qBAEhBR,EAAKU,aAAaC,IAAI,SAAAC,GAE3B,OADAT,QAAQC,IAAIQ,EAAGC,KAEbP,EAAAC,EAAAC,cAAA,MAAIM,GAAG,QACLR,EAAAC,EAAAC,cAAA,UACGI,EAAGC,IACJP,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UAAKI,EAAGG,OACRT,EAAAC,EAAAC,cAAA,UAAKI,EAAGI,WACRV,EAAAC,EAAAC,cAAA,UAAKI,EAAGK,YACRX,EAAAC,EAAAC,cAAA,UAAKI,EAAGM,WACRZ,EAAAC,EAAAC,cAAA,UAAKI,EAAGO,kBACRb,EAAAC,EAAAC,cAAA,UAAKI,EAAGQ,KACRd,EAAAC,EAAAC,cAAA,UAAKI,EAAGS,gBACRf,EAAAC,EAAAC,cAAA,UAAKI,EAAGU,qDAQlB,OAAOhB,EAAAC,EAAAC,cAAA,WAAMP,KAAKsB,uBA/BMC,aAmCbC,oBAAQ7B,EAAR6B,CAAsB1B,GChD/B2B,EAAS,IAAIC,IAAa,CAC9BC,IAAK,uCAiBQC,mLAZX,OACEvB,EAAAC,EAAAC,cAACsB,EAAA,eAAD,CAAgBJ,OAAQA,GACtBpB,EAAAC,EAAAC,cAAA,OAAKuB,UAAU,iBACbzB,EAAAC,EAAAC,cAAA,MAAIuB,UAAU,SACZzB,EAAAC,EAAAC,cAACwB,EAAD,gBANYR,aCKTK,mLARX,OACEvB,EAAAC,EAAAC,cAAA,UAAQuB,UAAU,cAChBzB,EAAAC,EAAAC,cAACyB,EAAD,cAJgBT,aC2BTU,mLAvBX,OACE5B,EAAAC,EAAAC,cAAA,QAAMuB,UAAU,YACdzB,EAAAC,EAAAC,cAAA,UAAQuB,UAAU,mBAChBzB,EAAAC,EAAAC,cAAA,OAAK2B,IAAKC,IAAML,UAAU,gBAAgBM,IAAI,SAC9C/B,EAAAC,EAAAC,cAAA,iBACOF,EAAAC,EAAAC,cAAA,0BADP,OACkCF,EAAAC,EAAAC,cAAA,gCADlC,wBAIAF,EAAAC,EAAAC,cAAA,KACEuB,UAAU,gBACVO,KAAK,sBACLC,OAAO,SACPC,IAAI,uBAJN,eAQAlC,EAAAC,EAAAC,cAACiC,EAAD,eAlBajB,aCURkB,mLALX,OAAOpC,EAAAC,EAAAC,cAACmC,EAAD,aAFOnB,aCLEoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5C,EAAAC,EAAAC,cAAC2C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.22908c23.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","// standard libs\r\n\r\n// other libs\r\nimport React, { Component } from \"react\";\r\nimport { gql } from \"apollo-boost\";\r\nimport { graphql } from \"react-apollo\";\r\n\r\n// standard components\r\n\r\n// other components\r\nconst getMessdaten = gql`\r\n  {\r\n    allMessdaten(Datum: \"2019-01-11\") {\r\n      UID\r\n      Datum\r\n      DatumZeit\r\n      Temperatur\r\n      Luftdruck\r\n      Luftfeuchtigkeit\r\n      VOC\r\n      FEINSTAUBPM100\r\n      FEINSTAUBPM25\r\n    }\r\n  }\r\n`;\r\n\r\nclass MessdatenList extends Component {\r\n  displayDaten() {\r\n    var data = this.props.data;\r\n\r\n    console.log(data);\r\n\r\n    if (data.loading) return <p>Loading...</p>;\r\n    if (data.error) return <p>Error :(</p>;\r\n\r\n    return data.allMessdaten.map(fu => {\r\n      console.log(fu.UID);\r\n      return (\r\n        <ul id=\"lolz\">\r\n          <li>\r\n            {fu.UID}\r\n            <ul>\r\n              <li>{fu.Datum}</li>\r\n              <li>{fu.DatumZeit}</li>\r\n              <li>{fu.Temperatur}</li>\r\n              <li>{fu.Luftdruck}</li>\r\n              <li>{fu.Luftfeuchtigkeit}</li>\r\n              <li>{fu.VOC}</li>\r\n              <li>{fu.FEINSTAUBPM100}</li>\r\n              <li>{fu.FEINSTAUBPM25}</li>\r\n            </ul>\r\n          </li>\r\n        </ul>\r\n      );\r\n    });\r\n  }\r\n  render() {\r\n    return <div>{this.displayDaten()}</div>;\r\n  }\r\n}\r\n\r\nexport default graphql(getMessdaten)(MessdatenList);\r\n","// standard libs\r\n\r\n// other libs\r\nimport React, { Component } from \"react\";\r\nimport ApolloClient from \"apollo-boost\";\r\nimport { ApolloProvider } from \"react-apollo\";\r\n\r\n// standard components\r\n\r\n// custom components\r\nimport Aqms from \"../atoms/Aqms\";\r\n\r\n// apollo client setup\r\nconst client = new ApolloClient({\r\n  uri: \"https://www.erebos.xyz/api/graphql\"\r\n});\r\n\r\nclass TestDaten extends Component {\r\n  render() {\r\n    return (\r\n      <ApolloProvider client={client}>\r\n        <div className=\"MessdatenList\">\r\n          <ul className=\"Daten\">\r\n            <Aqms />\r\n          </ul>\r\n        </div>\r\n      </ApolloProvider>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TestDaten;\r\n","// standard libs\r\n\r\n// other libs\r\nimport React, { Component } from \"react\";\r\n\r\n// standard components\r\n\r\n// other components\r\n\r\n// molecules\r\nimport MessdatenList from \"../molecules/MessdatenList\";\r\n\r\nclass TestDaten extends Component {\r\n  render() {\r\n    return (\r\n      <header className=\"App-header\">\r\n        <MessdatenList />\r\n      </header>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TestDaten;\r\n","// standard libs\r\n\r\n// other libs\r\nimport React, { Component } from \"react\";\r\n\r\n// standard components\r\n\r\n// other components\r\nimport logo from \"./logo.svg\";\r\n\r\n// organisms\r\nimport TestDaten from \"../organisms/TestDaten\";\r\n\r\n// Rendering of all active organisms\r\nclass Homepage extends Component {\r\n  render() {\r\n    return (\r\n      <main className=\"Homepage\">\r\n        <header className=\"Homepage-header\">\r\n          <img src={logo} className=\"Homepage-logo\" alt=\"logo\" />\r\n          <p>\r\n            Edit <code>src/App.js</code> or <code>src/components/*</code> and\r\n            save to reload.\r\n          </p>\r\n          <a\r\n            className=\"Homepage-link\"\r\n            href=\"https://reactjs.org\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n          >\r\n            Learn React\r\n          </a>\r\n          <TestDaten />\r\n        </header>\r\n      </main>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Homepage;\r\n","//npm install node-sass apollo-boost react-apollo graphql --save\r\n\r\n// standard libs\r\n\r\n// other libs\r\nimport React, { Component } from \"react\";\r\n\r\n// standard components\r\nimport \"./App.scss\";\r\n\r\n// other components\r\nimport \"./App.scss\";\r\n\r\n// pages\r\nimport Homepage from \"./components/pages/Homepage\";\r\n\r\n// Rendering of all active pages\r\nclass App extends Component {\r\n  render() {\r\n    return <Homepage />;\r\n  }\r\n}\r\n\r\n// Exporting of App (all active pages)\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}